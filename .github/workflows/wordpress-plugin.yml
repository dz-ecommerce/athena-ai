name: Automated Release

env:
  PRERELEASE: "false"

on:
  push:
    branches: [main]

permissions:
  contents: write
  id-token: write
  pull-requests: write

# Cancel in-progress jobs or runs for the current workflow run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git
        run: |
          git config --global user.email "info@dz-ecom.de"
          git config --global user.name "dz-ecommerce"
          git config --global core.autocrlf false

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none
          extensions: mbstring, intl

      - name: Get PHP version
        id: php_version
        run: |
          echo "php_version=$(php -r 'echo PHP_VERSION;')" >> $GITHUB_OUTPUT
          echo "Using PHP version: $(php -r 'echo PHP_VERSION;')"

      - name: Get and increment version
        id: get_version
        run: |
          echo "Reading version from athena-ai.php..."
          # Extract current version from plugin header
          PLUGIN_HEADER_VERSION=$(grep "Version:" athena-ai.php | sed -n 's/.*Version: *\([0-9.]*\).*/\1/p')
          
          # Extract current version from constant
          CONSTANT_VERSION=$(grep -oP "define\(['\"]ATHENA_AI_VERSION['\"],\s*['\"]\K[^'\"]+(?=['\"])?" athena-ai.php || true)
          
          # Use the newer version if they don't match
          if [ -z "$CONSTANT_VERSION" ] || [ "$CONSTANT_VERSION" = "$PLUGIN_HEADER_VERSION" ]; then
            # Versions match or constant not found, increment patch version
            CURRENT_VERSION="$PLUGIN_HEADER_VERSION"
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            PATCH_VERSION=$((VERSION_PARTS[2] + 1))
            NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"
            echo "Incrementing version from $CURRENT_VERSION to $NEW_VERSION"
          else
            # Versions don't match, use the newer one
            if [[ "$(printf '%s\n' "$PLUGIN_HEADER_VERSION" "$CONSTANT_VERSION" | sort -V | tail -n1)" == "$CONSTANT_VERSION" ]]; then
              CURRENT_VERSION="$CONSTANT_VERSION"
              NEW_VERSION="$CONSTANT_VERSION"
              echo "Using existing version from constant: $NEW_VERSION"
            else
              CURRENT_VERSION="$PLUGIN_HEADER_VERSION"
              NEW_VERSION="$PLUGIN_HEADER_VERSION"
              echo "Using existing version from plugin header: $NEW_VERSION"
            fi
          fi
          
          # Update version in plugin header if needed
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            sed -i "s/Version: $CURRENT_VERSION/Version: $NEW_VERSION/" athena-ai.php
          fi
          
          # Update version in constant definition if needed
          if [ -n "$CONSTANT_VERSION" ] && [ "$CONSTANT_VERSION" != "$NEW_VERSION" ]; then
            sed -i "s/define(\"ATHENA_AI_VERSION\", \"$CURRENT_VERSION\")/define(\"ATHENA_AI_VERSION\", \"$NEW_VERSION\")/" athena-ai.php
            sed -i "s/define('ATHENA_AI_VERSION', '$CURRENT_VERSION')/define('ATHENA_AI_VERSION', '$NEW_VERSION')/" athena-ai.php
            sed -i "s/define(\"ATHENA_AI_VERSION\",\s*\"$CURRENT_VERSION\")/define(\"ATHENA_AI_VERSION\", \"$NEW_VERSION\")/" athena-ai.php
            sed -i "s/define('ATHENA_AI_VERSION',\s*'$CURRENT_VERSION')/define('ATHENA_AI_VERSION', '$NEW_VERSION')/" athena-ai.php
          fi

          # Debug output
          echo "Versions after update:"
          PLUGIN_HEADER_VERSION=$(grep -oP 'Version:\s*\K[0-9.]+' athena-ai.php || echo 'Not found')
          CONSTANT_VERSION=$(grep -oP 'define\([\"\']ATHENA_AI_VERSION[\"\'],\s*[\"\']\K[0-9.]+(?=[\"\'])' athena-ai.php || echo 'Not found')
          echo "- Plugin header: $PLUGIN_HEADER_VERSION"
          echo "- Constant: $CONSTANT_VERSION"

          # Only commit if there are changes
          if ! git diff --quiet athena-ai.php; then
            git add athena-ai.php
            git commit -m "Bump version to $NEW_VERSION [skip ci]"
            git push
            echo "Committed version update to $NEW_VERSION"
          else
            echo "No version changes to commit"
          fi

          # Set output for later steps
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "previous_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT



      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Run JavaScript tests
        if: success()
        run: |
          npm test
          
      - name: Run PHP CodeSniffer
        if: success()
        run: |
          # Installiere PHP CodeSniffer und WordPress-Coding-Standards
          composer require --dev squizlabs/php_codesniffer wp-coding-standards/wpcs
          # Führe PHP_CodeSniffer mit WordPress-Standards aus
          ./vendor/bin/phpcs --standard=WordPress .
          
      - name: Run PHPStan
        if: success()
        run: |
          # Installiere PHPStan
          composer require --dev phpstan/phpstan
          # Führe PHPStan mit Level 5 aus (streng, aber nicht zu streng)
          ./vendor/bin/phpstan analyse --level=5
          
      - name: Build assets
        run: |
          npm run build:css
          # Weitere Build-Befehle können hier hinzugefügt werden
          # Stage CSS files
          git add assets/css/*.css

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No CSS changes to commit"
          else
            git commit -m "Update compiled CSS files for v${{ steps.get_version.outputs.version }} [skip ci]"
            git push
          fi

      - name: Commit build artifacts
        if: success()
        run: |
          # Stage CSS and other build artifacts
          git add assets/css/*.css
          
          # Add any other build artifacts that should be committed
          # git add path/to/other/artifacts

          # Check if there are changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.email "info@dz-ecom.de"
            git config --global user.name "GitHub Actions"
            git commit -m "Build: Update compiled assets [skip ci]"
            git push
          fi

      - name: Create plugin archives
        run: |
          # Create temporary directories
          mkdir -p build/athena-ai
          mkdir -p build/athena-ai-${{ steps.get_version.outputs.version }}

          # Copy plugin files to both directories
          rsync -av --exclude='.git*' --exclude='build' --exclude='node_modules' --exclude='tests' --exclude='php83' . build/athena-ai/
          rsync -av --exclude='.git*' --exclude='build' --exclude='node_modules' --exclude='tests' --exclude='php83' . build/athena-ai-${{ steps.get_version.outputs.version }}/

          # Create ZIP archives
          cd build
          zip -r athena-ai.zip athena-ai
          zip -r athena-ai-${{ steps.get_version.outputs.version }}.zip athena-ai-${{ steps.get_version.outputs.version }}
          cd ..

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          files: |
            build/athena-ai.zip
            build/athena-ai-${{ steps.get_version.outputs.version }}.zip
          body: |
            Automated release for v${{ steps.get_version.outputs.version }}

            Changes in this release:
            - Automatic version bump from v${{ steps.get_version.outputs.previous_version }} to v${{ steps.get_version.outputs.version }}
            - Compiled CSS files with latest Tailwind changes
            - Built with PHP ${{ steps.php_version.outputs.php_version }}
          prerelease: ${{ env.PRERELEASE }}
          token: ${{ secrets.GITHUB_TOKEN }}
