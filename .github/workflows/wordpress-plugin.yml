name: Automated Release

env:
  PRERELEASE: "false"

on:
  push:
    branches: [main]

permissions:
  contents: write
  id-token: write
  pull-requests: write

# Cancel in-progress jobs or runs for the current workflow run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git
        run: |
          git config --global user.email "info@dz-ecom.de"
          git config --global user.name "dz-ecommerce"
          git config --global core.autocrlf false

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none
          extensions: mbstring, intl

      - name: Get PHP version
        id: php_version
        run: |
          echo "php_version=$(php -r 'echo PHP_VERSION;')" >> $GITHUB_OUTPUT
          echo "Using PHP version: $(php -r 'echo PHP_VERSION;')"

      - name: Get version
        id: get_version
        run: |
          echo "Reading version from athena-ai.php..."
          # Einfache Versionserkennung aus der Konstante
          VERSION=$(grep -E "define\('ATHENA_AI_VERSION', '[0-9.]+'\)" athena-ai.php | cut -d "'" -f 4)
          
          if [ -z "$VERSION" ]; then
            # Fallback zur Plugin-Header-Version
            VERSION=$(grep -E "Version:[ ]*[0-9.]+" athena-ai.php | grep -o -E "[0-9.]+")
          fi
          
          echo "Detected version: $VERSION"
          
          # Inkrementiere die Patch-Version
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          PATCH_VERSION=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"
          echo "New version will be: $NEW_VERSION"
          
          # Aktualisiere die Version in der Plugin-Datei
          sed -i "s/Version:[ ]*$VERSION/Version: $NEW_VERSION/g" athena-ai.php
          sed -i "s/define('ATHENA_AI_VERSION', '$VERSION')/define('ATHENA_AI_VERSION', '$NEW_VERSION')/g" athena-ai.php
          
          # Überprüfe, ob Änderungen vorgenommen wurden
          if ! git diff --quiet athena-ai.php; then
            git add athena-ai.php
            git commit -m "Bump version to $NEW_VERSION [skip ci]"
            git push
            echo "Version updated and committed"
          else
            echo "No version changes to commit"
          fi
          
          # Setze Ausgabevariablen für spätere Schritte
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "previous_version=$VERSION" >> $GITHUB_OUTPUT



      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          # Installiere Hauptabhängigkeiten
          npm ci --prefer-offline --no-audit
          
          # Installiere fehlende Abhängigkeiten für den Build-Prozess
          npm install postcss-nesting vue@2 --no-save
          
          # Erstelle fehlende Verzeichnisse für den Build-Prozess
          mkdir -p assets/src/fonts
          mkdir -p assets/dist/css
          mkdir -p assets/dist/js
          mkdir -p assets/dist/fonts
          
      # Qualitätssicherungsprüfungen wurden entfernt und werden nur für Minor-Releases ausgeführt
          
      - name: Build assets
        run: |
          # Verwende das vorhandene build-Skript aus package.json
          npm run build
          # Weitere Build-Befehle können hier hinzugefügt werden
          # Stage CSS files
          git add assets/css/*.css

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No CSS changes to commit"
          else
            git commit -m "Update compiled CSS files for v${{ steps.get_version.outputs.version }} [skip ci]"
            git push
          fi

      - name: Commit build artifacts
        if: success()
        run: |
          # Stage CSS and other build artifacts
          git add assets/css/*.css
          
          # Add any other build artifacts that should be committed
          # git add path/to/other/artifacts

          # Check if there are changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.email "info@dz-ecom.de"
            git config --global user.name "GitHub Actions"
            git commit -m "Build: Update compiled assets [skip ci]"
            git push
          fi

      - name: Create plugin archives
        run: |
          # Create temporary directories
          mkdir -p build/athena-ai
          mkdir -p build/athena-ai-${{ steps.get_version.outputs.version }}

          # Copy plugin files to both directories
          rsync -av --exclude='.git*' --exclude='build' --exclude='node_modules' --exclude='tests' --exclude='php83' . build/athena-ai/
          rsync -av --exclude='.git*' --exclude='build' --exclude='node_modules' --exclude='tests' --exclude='php83' . build/athena-ai-${{ steps.get_version.outputs.version }}/

          # Create ZIP archives
          cd build
          zip -r athena-ai.zip athena-ai
          zip -r athena-ai-${{ steps.get_version.outputs.version }}.zip athena-ai-${{ steps.get_version.outputs.version }}
          cd ..

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          files: |
            build/athena-ai.zip
            build/athena-ai-${{ steps.get_version.outputs.version }}.zip
          body: |
            Automated release for v${{ steps.get_version.outputs.version }}

            Changes in this release:
            - Automatic version bump from v${{ steps.get_version.outputs.previous_version }} to v${{ steps.get_version.outputs.version }}
            - Compiled CSS files with latest Tailwind changes
            - Built with PHP ${{ steps.php_version.outputs.php_version }}
          prerelease: ${{ env.PRERELEASE }}
          token: ${{ secrets.GITHUB_TOKEN }}
